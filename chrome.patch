diff --git a/src/GUI/TalePlay.GUIElement.ControllerConfig.js b/src/GUI/TalePlay.GUIElement.ControllerConfig.js
index d4272db..9d6cb3d 100644
--- a/src/GUI/TalePlay.GUIElement.ControllerConfig.js
+++ b/src/GUI/TalePlay.GUIElement.ControllerConfig.js
@@ -251,8 +251,8 @@
 				event.stopPropagation();
 				
 				var input=event.target;
-				input.value=event.code||event.key;
-				input.title=getTitle(event.code||event.key);
+				input.value=event.code||event.key||event.keyCode;
+				input.title=getTitle(event.code||event.key||event.keyCode);
 			}
 		},
 		onClick:function(event)
diff --git a/src/GUI/TalePlay.GUIElement.Map.js b/src/GUI/TalePlay.GUIElement.Map.js
index 4ee2a38..c89ead3 100644
--- a/src/GUI/TalePlay.GUIElement.Map.js
+++ b/src/GUI/TalePlay.GUIElement.Map.js
@@ -10,8 +10,8 @@
 		point:"Math.Point"
 	});
 	
-	var cursorFilter= image => image instanceof GUI.Map.Cursor;
-	var cursorGetter= GuiMap => GuiMap.organizer.getFilter("cursors");
+	var cursorFilter= function(image){return image instanceof GUI.Map.Cursor};
+	var cursorGetter= function(GuiMap){return GuiMap.organizer.getFilter("cursors")};
 	
 	GUI.Map=Âµ.Class(GUI,{
 		init:function(param)
@@ -79,7 +79,7 @@
 		},
 		updateSize:function()
 		{
-			this.map.calcSize(img => !(img instanceof GUI.Map.Cursor));
+			this.map.calcSize(function(img){return !(img instanceof GUI.Map.Cursor)});
 		},
 		setThreshold:function(numberOrPoint,y)
 		{
@@ -96,8 +96,9 @@
 			else if(!this.paused)
 			{
 				var now=Date.now();
-				for(var [cursor, data] of this.movingCursors)
+				for(var entries=this.movingCursors.entries(),entryStep=entries.next();!entryStep.done;entryStep=entries.next())
 				{
+					var data=entryStep.value[1];
 					data.lastTime=now-performance.timing.navigationStart;
 				}
 				this.animationRquest=requestAnimationFrame(this._animateCursor);
@@ -159,8 +160,9 @@
 		},
 		_animateCursor:function(time)
 		{
-			for(var [cursor, data] of this.movingCursors)
+			for(var entries=this.movingCursors.entries(),entryStep=entries.next();!entryStep.done;entryStep=entries.next())
 			{
+				var cursor=entryStep.value[0],data=entryStep.value[1];
 				var timeDiff=Math.min(time-data.lastTime,GUI.Map.MAX_TIME_DELAY);
 	            if(data.animation)
 	            {
diff --git a/src/GUI/TalePlay.GUIElement.Menu.js b/src/GUI/TalePlay.GUIElement.Menu.js
index 82719df..17f96ec 100644
--- a/src/GUI/TalePlay.GUIElement.Menu.js
+++ b/src/GUI/TalePlay.GUIElement.Menu.js
@@ -135,18 +135,18 @@
 			}
 			if(this.type===MENU.Types.GRID)
 			{
-				var column=Array.indexOf(target.parentNode.children,target),
-				row=Array.indexOf(this.domElement.children,target.parentNode),
+				var column=Array.prototype.indexOf.call(target.parentNode.children,target),
+				row=Array.prototype.indexOf.call(this.domElement.children,target.parentNode),
 				gridLayout=this.getGridLayout();
 				index=row*gridLayout.columns+column;
 			}
 			else if (this.type===MENU.Types.TABLE&&this.header)
 			{
-				index=Array.indexOf(this.domElement.children,target)-1;
+				index=Array.prototype.indexOf.call(this.domElement.children,target)-1;
 			}
 			else
 			{
-				index=Array.indexOf(this.domElement.children,target);
+				index=Array.prototype.indexOf.call(this.domElement.children,target);
 			}
 			if(index>-1)
 			{
@@ -341,7 +341,7 @@
 			this._updateActive();
 		}
 	});
-	GMOD("shortcut")({SelectionTypes:()=>GMOD("Menu").SelectionTypes},MENU);
+	GMOD("shortcut")({SelectionTypes:function(){return GMOD("Menu").SelectionTypes}},MENU);
 	MENU.Types={
 		VERTICAL:1,
 		HORIZONTAL:2,
diff --git a/src/RPGPlayer/TalePlay.RPGPlayer.js b/src/RPGPlayer/TalePlay.RPGPlayer.js
index b5c4c35..4ba788c 100644
--- a/src/RPGPlayer/TalePlay.RPGPlayer.js
+++ b/src/RPGPlayer/TalePlay.RPGPlayer.js
@@ -191,7 +191,8 @@
 		},
 		setCursor:function(cursor)
 		{
-			cursor.urls=cursor.urls.map(u => u ? this.imageBaseUrl+u : u);
+			var _self=this;
+			cursor.urls=cursor.urls.map(function(u){return u ? _self.imageBaseUrl+u : u});
 			cursor.name=cursor.name||"";
 			cursor.collision=cursor.collision!==false;
 			this.gameSave.getCursor().fromJSON(cursor);
@@ -204,7 +205,8 @@
 			var clone=new SC.GameSave();
 			clone.fromJSON(JSON.parse(JSON.stringify(this.gameSave)));
 			var cursor=clone.getCursor();
-			cursor.urls=cursor.urls.map(u => u ? u.slice(u.lastIndexOf("/")+1) : u);
+			var _self=this;
+			cursor.urls=cursor.urls.map(function(u){return u ? u.slice(u.lastIndexOf("/")+1) : u});
 			
 			return clone;
 		},
diff --git a/src/TalePlay.Controller.Gamepad.js b/src/TalePlay.Controller.Gamepad.js
index 842b5e1..5ee29db 100644
--- a/src/TalePlay.Controller.Gamepad.js
+++ b/src/TalePlay.Controller.Gamepad.js
@@ -13,6 +13,7 @@
 			SC.rs.all(["update"],this);
 			
 			this.gamepad=gamepad;
+			this.gamepadIndex=gamepad.index;
 			this.precision=precision||1;
 			this.pollKey=null;
 			
@@ -20,17 +21,10 @@
 		},
 		update:function()
 		{
-			if(!this.gamepad.connected)
-			{
-				var gamepads=navigator.getGamepads();
-				if(gamepads[this.gamepad.index])
-				{
-					this.gamepad=gamepads[this.gamepad.index];
-				}
-			}
+			this.gamepad=navigator.getGamepads()[this.gamepadIndex];
 			if(this.gamepad.connected)
 			{
-				this.set(this.gamepad.buttons.map(b => b.value),this.gamepad.axes.map(a => a.toFixed(this.precision)*1));
+				this.set(this.gamepad.buttons.map(function(b){return b.value}),this.gamepad.axes.map(function(a){return a.toFixed(this.precision)*1}));
 			}
 			this.pollKey=requestAnimationFrame(this.update);
 		},
diff --git a/src/TalePlay.Controller.Keyboard.js b/src/TalePlay.Controller.Keyboard.js
index ffa43e5..7641266 100644
--- a/src/TalePlay.Controller.Keyboard.js
+++ b/src/TalePlay.Controller.Keyboard.js
@@ -51,13 +51,13 @@
 		{
 			if(!this.disabled&&this.mapping)
 			{
-				if(this.mapping.hasButtonMapping(event.code||event.key)||this.mapping.hasButtonAxisMapping(event.code||event.key))
+				if(this.mapping.hasButtonMapping(event.code||event.key||event.keyCode)||this.mapping.hasButtonAxisMapping(event.code||event.key||event.keyCode))
 				{
 					event.preventDefault();
 					event.stopPropagation();
 					
 					var map={};
-					map[event.code||event.key]=value;
+					map[event.code||event.key||event.keyCode]=value;
 					this.setButton(map);
 				}
 			}
@@ -79,7 +79,19 @@
 			" ": "0",
 			"Shift": "1",
 			"Pause": "8",
-			"Enter": "9"
+			"Enter": "9",
+			
+			//chrome keyCode
+			"13": "9",
+			"16": "1",
+			"19": "8",
+			"32": "0",
+			"97": "2",
+			"98": "3",
+			"99": "4",
+			"100": "5",
+			"101": "6",
+			"102": "7",
 		},
 		"buttonAxis": {
 			"w": "1",
@@ -89,7 +101,17 @@
 			"Up": "3",
 			"Right": "2",
 			"Down": "-3",
-			"Left": "-2"
+			"Left": "-2",
+			
+			//chrome keyCode
+			"37": "-2",
+			"38": "3",
+			"39": "2",
+			"40": "-3",
+			"65": "-0",
+			"68": "0",
+			"83": "-1",
+			"87": "1"
 		},
 		"axes": {}
 	};
diff --git a/src/TalePlay.Layer.MapMaker.js b/src/TalePlay.Layer.MapMaker.js
index 7d3eec8..b0eeeb1 100644
--- a/src/TalePlay.Layer.MapMaker.js
+++ b/src/TalePlay.Layer.MapMaker.js
@@ -154,7 +154,7 @@
 						var reader=new FileReader();
 						reader.onload=function(e)
 						{
-							rtn.file=Array.slice(new Uint8Array(e.target.result,0,e.target.result.byteLength));
+							rtn.file=Array.prototype.slice.call(new Uint8Array(e.target.result,0,e.target.result.byteLength));
 						};
 						reader.readAsArrayBuffer(val);
 					}
@@ -196,7 +196,8 @@
         selectImage:function()
         {
             var pos=this.map.cursors[0].getPosition();
-            var image=this.map.getImages(val => val!==this.map.cursors[0]&&val.rect.contains(pos))[0];
+            var _self=this;
+            var image=this.map.getImages(function(val){return val!==_self.map.cursors[0]&&val.rect.contains(pos)})[0];
             if(image)
             {
                 new imageLayer({
diff --git a/src/minigames/TimeStroke.js b/src/minigames/TimeStroke.js
index 6e4c293..2b2ab81 100644
--- a/src/minigames/TimeStroke.js
+++ b/src/minigames/TimeStroke.js
@@ -86,7 +86,7 @@
 				{
 					item.domElement.style.left=distance+"%";
 					item.domElement.dataset.active=item.active=(distance<=this.zoneWidth);
-					if(Array.indexOf(this.domElement.children,item.domElement)===-1)
+					if(Array.prototype.indexOf.call(this.domElement.children,item.domElement)===-1)
 					{
 						this.domElement.appendChild(item.domElement);
 					}
